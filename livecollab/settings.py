"""
Django settings for mychat project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# Uncomment this line for local development (use a hardcoded key)
# SECRET_KEY = 'django-insecure-^yycd4l+rk4jdxp+p3nu98^k-8$*74r&eomge^*&kchb^y9hg_'


# Comment the below SECRET_KEY when running locally and uncomment it when deploying.
# The SECRET_KEY is now fetched from environment variables to enhance security, ensuring sensitive data is not stored in the codebase and can vary across environments.

# Uncomment this line for production (fetches from environment variable)
SECRET_KEY = os.environ.get('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!

# Uncomment this line for local development (enables DEBUG mode)
# DEBUG = True


# Comment the below DEBUG = True when deploying to production and uncomment the environment-based DEBUG setting.
# The DEBUG setting is now controlled via environment variables to ensure the appropriate mode (debug or production) is used depending on the environment.

# Uncomment this line for production (fetches DEBUG from environment variable)
DEBUG = os.environ.get('DEBUG', 'False') == 'True'


# Uncomment this line for local development (allows localhost)
# ALLOWED_HOSTS = []

# Comment the below ALLOWED_HOSTS = [] when deploying to production and uncomment the environment-based ALLOWED_HOSTS setting.
# ALLOWED_HOSTS is now dynamically fetched from environment variables to ensure only allowed domains are permitted, enhancing security in production environments.

# Uncomment this line for production (fetches ALLOWED_HOSTS from environment variable)
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(' ')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',   # WhiteNoiseMiddleware is added to handle static file serving in production environments.
]

ROOT_URLCONF = 'livecollab.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'livecollab.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static'
]


# The below code is used specifically for deployment to production environments.
# 
# - `STATIC_ROOT` is defined to collect all static files into a directory (`staticfiles`),
#   which is required for serving static assets in production.
# - The WhiteNoise storage backend (`STATICFILES_STORAGE`) is enabled to compress static files 
#   (using gzip or Brotli) and append unique version identifiers to filenames. This ensures
#   efficient file serving, reduces load times, and enables long-term caching.
# - These settings are applied only in production (when DEBUG is False) to ensure compatibility
#   with deployment requirements, as the development server handles static files differently.


# This production code might break development mode, so we check whether we're in DEBUG mode
if not DEBUG:    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
